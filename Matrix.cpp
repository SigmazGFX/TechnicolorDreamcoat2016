#include "stdint.h"
#include "Matrix.h"

//
// Matrix.h
//
// Lookup table and coresponding XY() function for the Technocolour Dreamcoat.
// Technique cribbed from https://github.com/macetech/RGBShades/blob/master/XYmap.h
//
// Content of lookup table generated from the following Swift code executed in a playground:
//

//let heights = [
//               20, 20, 20, 20, 18, 18, 18, 14, 12,
//               12, 14, 20, 20, 20, 20, 18, 18, 18,
//               18, 18, 18, 20, 20, 20, 20, 14, 12,
//               12, 14, 18, 18, 18, 20, 20, 20, 20
//               ]
//
//func generateMatrix(heights: [Int], maxHeight: Int) -> String {
//    var visibleIdx = 0
//    var hiddenIdx = 640
//    var output = ""
//    
//    for (idx, height) in heights.enumerate() {
//        var line = ""
//        for h in 0..<maxHeight {
//            if h < height {
//                if idx % 2 == 0 {
//                    line = line + String(format: "%4d,", visibleIdx++)
//                } else {
//                    line = String(format: "%4d,", visibleIdx++) + line
//                }
//            } else {
//                line += String(format: "%4d,", hiddenIdx++)
//            }
//        }
//        output += line + "\n"
//    }
//    return output
//}
//
//print(generateMatrix(heights, maxHeight: 20))

const uint16_t matrix[kNumLeds] = {
      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
     39,  38,  37,  36,  35,  34,  33,  32,  31,  30,  29,  28,  27,  26,  25,  24,  23,  22,  21,  20,
     40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
     79,  78,  77,  76,  75,  74,  73,  72,  71,  70,  69,  68,  67,  66,  65,  64,  63,  62,  61,  60,
     80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97, 640, 641,
    115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100,  99,  98, 642, 643,
    116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 644, 645,
    147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 646, 647, 648, 649, 650, 651,
    148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 652, 653, 654, 655, 656, 657, 658, 659,
    171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 660, 661, 662, 663, 664, 665, 666, 667,
    172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 668, 669, 670, 671, 672, 673,
    205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186,
    206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
    245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226,
    246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
    283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 674, 675,
    284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 676, 677,
    319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 678, 679,
    320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 680, 681,
    355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 682, 683,
    356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 684, 685,
    393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374,
    394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413,
    433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414,
    434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453,
    467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 686, 687, 688, 689, 690, 691,
    468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 692, 693, 694, 695, 696, 697, 698, 699,
    491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 700, 701, 702, 703, 704, 705, 706, 707,
    492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 708, 709, 710, 711, 712, 713,
    523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 714, 715,
    524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 716, 717,
    559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 718, 719,
    560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
    599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580,
    600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
    639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620,

};

uint16_t XY(uint8_t x, uint8_t y) {
    return matrix[(x * kMatrixHeight) + y];
}
